#!/usr/bin/env node
var path = require('path');
var precompile = require('../src/precompile');
var Environment = require('../src/environment').Environment;
var lib = require('../src/lib');
var args = process.argv.slice();

var force = false;
var help = false;
var asyncFilters = null;

// Remove the "node precompile" arguments
args.shift();
args.shift();

// Process any flags
while(1) {
    if(args[0] == '-?' || args[0] == '-h') {
        help = true;
    }
    else if(args[0] == '-f') {
        force = true;
        args.shift();
    }
    else if(args[0] == '-a') {
        asyncFilters = args[1].split(',');
        args.shift();
        args.shift();
    }
    else {
        break;
    }
}

var inputPath = args[0];

if(help || args.length === 0) {
    console.log('Precompile nunjucks templates to javascript. If you use extensions,\n' +
                'you need to use the JavaScript API to precompile so you can install any\n' +
                'extensions you use.\n\n' +
                'Usage: ' + path.basename(process.argv[1]) + 
                ' [-f] [-a <filters>] <file/dir>\n\n' +
                ' -f  Force compilation to continue on error.\n' +
                '     If <file/dir> is a file, outputs compiled javascript for\n' +
                '     that file to stdout. If <file/dir> is a directory, outputs\n' +
                '     compiled javascript for all html files underneath it\n\n' +
                ' -a <filters>  Give the compiler a comma-delimited list of\n' +
                '     asynchronous filters, required for correctly generating code');
    process.exit(1);
}

var env = new Environment([]);

lib.each(asyncFilters, function(name) {
    env.addFilter(name, function() {}, true);
});

console.log(precompile(inputPath, env, force));
